sample(nrow(5))
sample((5))
sample((5),3)
sample((5),3)
library(bannerCommenter)
banner("Functions", emph=TRUE)
banner("Testing from output to input")
banner("Testing from output to input",emph=true)
banner("Testing from output to input",emph=TRUE)
banner("OLD CODE")
banner("Check for pair of segments")
banner("Check for pairs of segments",snug=TRUE)
banner("Starting...",snug=TRUE)
banner("Remove and replace original dataset with new identifiers", snug=TRUE)
banner("Finishing...",snug=TRUE)
banner("Results")
banner("Results", snug=TRUE)
library(bann)
library(bannerCommenter)
banner("ARTIFICIAL DATASET",emph=TRUE)
read.csv("C:/Users/juanc/Downloads/test reg.csv")
data<-read.csv("C:/Users/juanc/Downloads/test reg.csv")
?lm
View(data)
lm(data$誰..y~data$x)
model=lm(data$誰..y~data$x)
summary(model)
View(data)
model=lm(data$誰..y~data$x)
summary(model)
data<-read.csv("C:/Users/juanc/Downloads/test reg.csv")
model=lm(data$誰..y~data$x)
summary(model)
library("gap")
install.packages("gap")
library("gap")
qqunif(c(-3,6),type="unif")
qqunif((-3,6),type="unif")
runif(-3,6)
runif(100,-3,6)
hola<-runif(100,-3,6)
hola
write.csv(hola,"C:/Users/juanc/Downloads/data.csv")
hola<-runif(1000,-3,6)
write.csv(hola,"C:/Users/juanc/Downloads/data.csv")
write.csv(hola,"C:/Users/juanc/Downloads/data.csv")
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
py_install("geopandas")
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
py_install(
"geopandas",
envname = NULL,
method = c("conda"),
conda = "auto",
python_version = NULL,
pip = FALSE)
Ar
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
py_install(
"geopandas",
envname = NULL,
method = c("conda"),
conda = "auto",
python_version = NULL,
pip = FALSE)
py_install("dbfread")
py_install("os")
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
py_install(
"geopandas")
py_install("dbfread")
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
py_install("geopandas")
py_install("dbfread")
py_install("os")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
library(bannerCommenter)
banner("argparser",emph=TRUE)
banner("argparser")
banner("Reading data")
banner("Descriptive statistics")
banner("Descriptive statistics for each route")
banner("Sample syntax")
banner("Example of how to use from command line")
library(bannerCommenter)
banner("Linestring")
banner("Polygon")
library(lmtest) #for coeftest() and bptest().
library(broom) #for glance() and tidy()
library(PoEdata) #for PoE4 datasets
library(car) #for hccm() robust standard errors
library(sandwich)
library(knitr)
library(stargazer)
pval <- 1-pchisq(chisq, S-1)
chisq <- 40*0.76
S=3
pval <- 1-pchisq(chisq, S-1)
pval
options(scipen=999)
pval
pval
chisq
40*0.76
pval
pchisq(chisq, S-1)
# Load libraries
library(Synth)
library(plyr)
library(SCtools) # for inference
library(bannerCommenter)
install.packages("SCtools")
###########################################################################
###########################################################################
###                                                                     ###
###                          SYNTHETIC CONTROL                          ###
###                                                                     ###
###########################################################################
###########################################################################
library(devtools)
# Load libraries
library(Synth)
install.packages("Synth")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/Synth/Synth_1.1-6.tar.gz"
install.packages(packageurl, contriburl=NULL, type="source")
version
# Load libraries
library(Synth)
# Load libraries
library(Synth)
###########################################################################
###########################################################################
###                                                                     ###
###                              READ DATA                              ###
###                                                                     ###
###########################################################################
###########################################################################
# Libraries
#library(readxl)
library(bannerCommenter)
#library(tidyr)
library(readr)
library(dplyr)
setwd("E:/articulos/logic1800/")
# Read data
df <- read_csv("input/deathsweekly.csv",
col_names = FALSE, skip = 9)
banner("Death data")
banner("Suicide data")
# Read data
df <- read_csv("input/canada-suicide-data.csv",
col_names = FALSE, skip = 9)
View(df)
# Change colnames
colnames(df)<-c("place","period","suicides")
# Remove empty rows
df <- df[3:nrow(df), ]
# Remove empty rows
df <- df[4:nrow(df), ]
# Read data
df <- read_csv("input/canada-suicide-data.csv",
col_names = FALSE, skip = 9)
# Change colnames
colnames(df)<-c("place","period","suicides")
# Remove empty rows
df <- df[4:nrow(df), ]
View(df)
# Remove last rows (empty)
df <- df[1:(nrow(df)-29),]
# Replace empty with 0
df[is.na(df$place)==TRUE, ]$place<-"NA"
# Inserting places
for (row in 1:nrow(df)) {
place <- df[row, "place"]
if(place!="NA") {
next
} else{
df[row,"place"]$place<-df[row-1,"place"]$place
}
}
# Change week date for week numbers
df <- df %>%
group_by(place) %>%
mutate(week_number = row_number())
# Count how many weeks
df %>%
group_by(place) %>%
summarise(num_valores_unicos = n_distinct(week_number), .groups = "drop")
unique(df$both_sex)
unique(df$suicides)
# Create total deaths
df <- df %>%
group_by(period) %>%
mutate(canada_deaths = sum(suicides, na.rm = TRUE) )
df$suicides<-as.numeric(df$suicides)
#keep only canada
df<-df[df$place=="Canada, place of occurrence",]
# Create total deaths
df <- df %>%
group_by(period) %>%
mutate(canada_deaths = sum(both_sex, na.rm = TRUE) )
# Create total deaths
df <- df %>%
group_by(period) %>%
mutate(canada_deaths = sum(suicides, na.rm = TRUE) )
# Remove NAs
dfcanada<-dfcanada[!(is.na(df$suicides)),]
# Remove NAs
dfcanada<-df[!(is.na(df$suicides)),]
# Read data
df <- read_csv("input/canada-suicide-data.csv",
col_names = FALSE, skip = 9)
# Change colnames
colnames(df)<-c("place","period","suicides")
# Remove empty rows
df <- df[4:nrow(df), ]
# Remove last rows (empty)
df <- df[1:(nrow(df)-29),]
# Replace empty with 0
df[is.na(df$place)==TRUE, ]$place<-"NA"
# Inserting places
for (row in 1:nrow(df)) {
place <- df[row, "place"]
if(place!="NA") {
next
} else{
df[row,"place"]$place<-df[row-1,"place"]$place
}
}
# Change week date for week numbers
df <- df %>%
group_by(place) %>%
mutate(week_number = row_number())
# Count how many weeks
df %>%
group_by(place) %>%
summarise(num_valores_unicos = n_distinct(week_number), .groups = "drop")
unique(df$suicides)
# Correct column type
df$suicides<-as.numeric(df$suicides)
#keep only canada
df<-df[df$place=="Canada, place of occurrence",]
# Create total deaths
#df <- df %>%
#  group_by(period) %>%
#  mutate(canada_deaths = sum(suicides, na.rm = TRUE) )
# Remove NAs
dfcanada<-df[!(is.na(df$suicides)),]
dfcanada<-unique(dfcanada)
# GRAPH
# Song released April 27, 2017, week number: 381 (April 22, 2017)
#2017 start at 366, finish at 418
start_date<-366
finish_date<-418
dfcanada_filtered <- dfcanada[dfcanada$week_number >= start_date & dfcanada$week_number <= finish_date, ]
library(ggplot2)
graph <- ggplot(dfcanada_filtered, aes(x=week_number, y=suicides)) +
geom_line() +   theme_bw()   +
xlab("")
graph
graph + geom_vline(xintercept = 381)
#2016 start at 313, finish at 365
start_date<-313
finish_date<-365
dfcanada_filtered <- dfcanada[dfcanada$week_number >= start_date & dfcanada$week_number <= finish_date, ]
library(ggplot2)
graph2 <- ggplot(dfcanada_filtered, aes(x=week_number, y=suicides)) +
geom_line() +   theme_bw()   +
xlab("")
graph2
graph2 + geom_vline(xintercept = 329)
dfcanada<-unique(dfcanada)
# GRAPH
# Song released April 27, 2017, week number: 381 (April 22, 2017)
# MTV video music award: august 27 2017: week number: 400
# Performance at grammy awards on 28 january 2018
#2017 start at 366, finish at 418
start_date<-366
finish_date<-418
dfcanada_filtered <- dfcanada[dfcanada$week_number >= start_date & dfcanada$week_number <= finish_date, ]
library(ggplot2)
graph <- ggplot(dfcanada_filtered, aes(x=week_number, y=suicides)) +
geom_line() +   theme_bw()   +
xlab("")
graph
graph + geom_vline(xintercept = 381) +geom_vline(xintercept = 400)
#2016 start at 313, finish at 365
start_date<-313
finish_date<-365
dfcanada_filtered <- dfcanada[dfcanada$week_number >= start_date & dfcanada$week_number <= finish_date, ]
library(ggplot2)
graph2 <- ggplot(dfcanada_filtered, aes(x=week_number, y=suicides)) +
geom_line() +   theme_bw()   +
xlab("")
graph2
graph2 + geom_vline(xintercept = 329) +geom_vline(xintercept = 348)
# Remove duplicated rows
dfcanada<-unique(dfcanada)
# GRAPH
# Song released April 27, 2017, week number: 381 (April 22, 2017)
# MTV video music award: august 27 2017: week number: 400
# Performance at grammy awards on 28 january 2018
#2017 start at 366, finish at 418
start_date<-366
finish_date<-418
dfcanada_filtered <- dfcanada[dfcanada$week_number >= start_date & dfcanada$week_number <= finish_date, ]
library(ggplot2)
graph <- ggplot(dfcanada_filtered, aes(x=week_number, y=suicides)) +
geom_line() +   theme_bw()   +
xlab("")
graph
graph + geom_vline(xintercept = 381) +geom_vline(xintercept = 400)
# Remove duplicated rows
dfcanada<-unique(dfcanada)
# GRAPH
# Song released April 27, 2017, week number: 381 (April 22, 2017)
# MTV video music award: august 27 2017: week number: 400
# Performance at grammy awards on 28 january 2018, week 422
#2017 start at 366, finish at 418
start_date<-366
finish_date<-450
dfcanada_filtered <- dfcanada[dfcanada$week_number >= start_date & dfcanada$week_number <= finish_date, ]
library(ggplot2)
graph <- ggplot(dfcanada_filtered, aes(x=week_number, y=suicides)) +
geom_line() +   theme_bw()   +
xlab("")
graph
graph + geom_vline(xintercept = 381) +geom_vline(xintercept = 400) +geom_vlin(xintercept= 422)
dfcanada<-unique(dfcanada)
# GRAPH
# Song released April 27, 2017, week number: 381 (April 22, 2017)
# MTV video music award: august 27 2017: week number: 400
# Performance at grammy awards on 28 january 2018, week 422
#2017 start at 366, finish at 418
start_date<-366
finish_date<-450
dfcanada_filtered <- dfcanada[dfcanada$week_number >= start_date & dfcanada$week_number <= finish_date, ]
library(ggplot2)
graph <- ggplot(dfcanada_filtered, aes(x=week_number, y=suicides)) +
geom_line() +   theme_bw()   +
xlab("")
graph
graph + geom_vline(xintercept = 381) +geom_vline(xintercept = 400) +
geom_vline(xintercept= 422)
graph + geom_vline(xintercept = 381) +geom_vline(xintercept = 400) +
geom_vline(xintercept= 422)+ geom_vline(xintercept = 329) +geom_vline(xintercept = 348)+ geom_vline(xintercept = 369)
# Remove duplicated rows
dfcanada<-unique(dfcanada)
# GRAPH
# Song released April 27, 2017, week number: 381 (April 22, 2017)
# MTV video music award: august 27 2017: week number: 400
# Performance at grammy awards on 28 january 2018, week 422
#2017 start at 366, finish at 418
start_date<-313
finish_date<-450
dfcanada_filtered <- dfcanada[dfcanada$week_number >= start_date & dfcanada$week_number <= finish_date, ]
library(ggplot2)
graph <- ggplot(dfcanada_filtered, aes(x=week_number, y=suicides)) +
geom_line() +   theme_bw()   +
xlab("")
graph
graph + geom_vline(xintercept = 381) +geom_vline(xintercept = 400) +
geom_vline(xintercept= 422)+ geom_vline(xintercept = 329) +geom_vline(xintercept = 348)+ geom_vline(xintercept = 369)
